/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as GuidesImport } from './routes/guides'
import { Route as IndexImport } from './routes/index'
import { Route as DownloadsIndexImport } from './routes/downloads/index'
import { Route as DownloadsStatusImport } from './routes/downloads/$status'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const GuidesRoute = GuidesImport.update({
  path: '/guides',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DownloadsIndexRoute = DownloadsIndexImport.update({
  path: '/downloads/',
  getParentRoute: () => rootRoute,
} as any)

const DownloadsStatusRoute = DownloadsStatusImport.update({
  path: '/downloads/$status',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/guides': {
      id: '/guides'
      path: '/guides'
      fullPath: '/guides'
      preLoaderRoute: typeof GuidesImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/downloads/$status': {
      id: '/downloads/$status'
      path: '/downloads/$status'
      fullPath: '/downloads/$status'
      preLoaderRoute: typeof DownloadsStatusImport
      parentRoute: typeof rootRoute
    }
    '/downloads/': {
      id: '/downloads/'
      path: '/downloads'
      fullPath: '/downloads'
      preLoaderRoute: typeof DownloadsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/guides': typeof GuidesRoute
  '/settings': typeof SettingsRoute
  '/downloads/$status': typeof DownloadsStatusRoute
  '/downloads': typeof DownloadsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/guides': typeof GuidesRoute
  '/settings': typeof SettingsRoute
  '/downloads/$status': typeof DownloadsStatusRoute
  '/downloads': typeof DownloadsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/guides': typeof GuidesRoute
  '/settings': typeof SettingsRoute
  '/downloads/$status': typeof DownloadsStatusRoute
  '/downloads/': typeof DownloadsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/guides' | '/settings' | '/downloads/$status' | '/downloads'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/guides' | '/settings' | '/downloads/$status' | '/downloads'
  id:
    | '__root__'
    | '/'
    | '/guides'
    | '/settings'
    | '/downloads/$status'
    | '/downloads/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuidesRoute: typeof GuidesRoute
  SettingsRoute: typeof SettingsRoute
  DownloadsStatusRoute: typeof DownloadsStatusRoute
  DownloadsIndexRoute: typeof DownloadsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuidesRoute: GuidesRoute,
  SettingsRoute: SettingsRoute,
  DownloadsStatusRoute: DownloadsStatusRoute,
  DownloadsIndexRoute: DownloadsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/guides",
        "/settings",
        "/downloads/$status",
        "/downloads/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/guides": {
      "filePath": "guides.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/downloads/$status": {
      "filePath": "downloads/$status.tsx"
    },
    "/downloads/": {
      "filePath": "downloads/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
